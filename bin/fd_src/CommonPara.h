///////////////////////////////////////////////////////////////////////////////////////////////
//         Copyright (C) Regents of the University of Michigan - All Rights Reserved         //
//          Unauthorized copying of this file, via any medium is strictly prohibited         //
//                                                                                           //
//                          Author: Robin Pearce <robpearc@umich.edu>                        //
//                                                                                           //
///////////////////////////////////////////////////////////////////////////////////////////////

#ifndef COMMONPARA_H
#define COMMONPARA_H

#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <string.h>
#include <math.h>
#include <fstream>
#include <iostream>
#include <sys/stat.h>
#include <vector>
using namespace std;

#define currentsystem 1//0 windows 1 linux
#if currentsystem==0
#include <windows.h>
#else
#include <sys/time.h>
#endif

/**** constants ****/
#define nosegdh 30
#define topno 200
#define nosegunit 9
#define nosegunit2 3
#define maxnumchains 128
#define epsilon  1e-7
#define remcno 2001
#define vecleng 3

#define lennca 1.460f
#define lencac 1.525f
#define lencn 1.338f
#define lencaca 3.813f
#define lennc 2.460f
#define lencca1 2.446f
#define lencan1 2.441f

#define angncac 111.008f
#define angcacn 116.617f
#define angcnca 121.614f

#define delcn 0.005f*15
#define delcca1 0.036f*4
#define delcan1 0.036f*4
#define delcaca 0.019f*10
#define delnca 0.004f*20
#define delnc 0.012f*10
#define delcac 0.004f*20

#define STD_FILE_NAME_LENGTH 1024
#define STD_ARRAY_SIZE 1024

/**** typedef ****/
typedef struct modelinfo
{
        int ind;
        double cut;
        int totnei;
}modelinfo;

typedef struct featvec
{
        double f[vecleng];
}featvec;

typedef struct cfeatvec
{
        double f[vecleng];
        int *ind2vec;
        int num;
}cfeatvec;

typedef struct paircont
{
  int init;
  int term;
  double dist;
  double prob;
}paircont;

typedef struct ssef
{
  char res;
  char ss;
  float a[3];//coil helix sheet
}ssef;//no change

typedef struct headinfo
{
  int dddd[3];
  char name[8];
  int drev[3],dnew[3];
  bool fobs,frev;
  float fres;
  int iept;
  int species;
}headinfo;

typedef struct pairaa
{
  bool ispair;
  double dist;
  double dstd;
  double pval;
  int pbin,tnum;
  double ratio[20];
}pairaa;

typedef struct segse
{
  int indss2;
  int init;
  int term;
}segse;

typedef struct dbtype
{
  unsigned char lfirst,lsecond,lthird;
  char first[5];
  char second[15];
  char third[12];
}dbtype;

typedef struct seqpair
{
  int noids;
  dbtype cids[1200];//identical sequences
  int sleng;
  char method[150];
  float score;
  int ident,posit,gap,tot;
  double fexp;
  float fident,fgap,fposit;
  segse seqq,seqs;
  char *cseqq, *cseqm, *cseqs;
}seqpair;

typedef struct spdf
{
  char aa;
  float a[26];
}spdf;//no change

typedef struct namep
{
  char name[8];
  int seqnum;
  int len,ttp[8];
  float rfac,res,rval;
}namep;

typedef struct seginfo
{
  int indtmp;
  double solv[20];
  char name[8];
  int start;
  float fdist;
  char css[1000];
  char caa[1000];
}seginfo;

typedef struct sssegment
{
  int init;
  int term;
  char ss;
}sssegment;

typedef struct point3d
{
  double x,y,z;
}point3d;

typedef struct point3s
{
  float x,y,z;
}point3s;

typedef struct dihedral
{
  char name[8];
  char ss;//second
  char aa;//residue
  int ind;//pdbpos
  point3s tp[4];//ca n c o
  float caphi,calen,cainn;
  double phi,psi,omega;
  double leng[3],inner[3];//0 ca
  double clunum;
  // 0 cn cacn 1  nca cnca 2 cac ncac
}dihedral;//no change

typedef struct residuepair2
{
  double pval[20];//value
  int pcw[20];//value
  bool flag[24];//to process error when the total byte*8!=real bits
}residuepair2;

typedef struct outliers
{
  int numOutliers[60];//wrong pos
  int *indn[60];//ene int
  double *indf[60];//ene dou
}outliers;

typedef struct point3f
{
  //aaa,ssm,ss2 not exist in fragments
  int resind;//from fragments
  float x,y,z;
  float len[3],ang[3],tor[3];//n ca c  0psi-1 n-1 ca-1 c-1 n; 1ome ca-1 c-1 n ca; 2phi c-1 n ca c
  float vpos,tpos,prob;//v means co-pair in the left; t means co-pair in the right
  int indl,indr,tpl,tpr;
  float leng,angl,phi;
  point3s ptn,ptc,pto,ptb,pth,ptha,ptsg,ptg;
  char name[8];//from fragments
  char residueid;//ACD from fragments
  char stype;//from fragments
  char ss3;//3-state secondary structure
  char ss8;//8-state secondary structure
  char ssm;//mycalculation
  char aaa; // one letter amino acid code (realseq ACD)
  unsigned char iaa;//realACD index
}point3f;

typedef struct hbond {
  bool turnflag[3];
  double energy[3];
}hbond;

typedef struct point3ffull
{
  //aaa,ssm,ss2 not exist in fragments
  int resind;//from fragments
  float x,y,z;
  float len[3],ang[3],tor[3];//n ca c  0psi-1 n-1 ca-1 c-1 n; 1ome ca-1 c-1 n ca; 2phi c-1 n ca c
  float vpos,tpos,prob;//v means co-pair in the left; t means co-pair in the right
  int indl,indr,tpl,tpr;
  float leng,angl,phi;
  point3s ptn,ptc,pto,ptb,pth,ptha,ptsg,ptg;
  float ptscx[50]; //side-chain atoms x position
  float ptscy[50]; //side-chain atoms y position
  float ptscz[50]; //side-chain atoms z position
  char name[8];//from fragments
  char residueid;//ACD from fragments
  char stype;//from fragments
  char ss3;//psipred
  char ssm;//mycalculation
  char aaa; // one letter amino acid code (realseq ACD)
  unsigned char iaa;//realACD index
}point3ffull;

typedef struct residueatoms
{
    int scpr,mcpr;
    int indl,indr,tpl,tpr;
    int aopt;//0 move 1 use initial then to move 2 fixed 3 move only close to 0
    int indrot;//index for rotamer
    int residueid;//sequence
    int bintor[7];//phi psi [0,71] 
    point3d pc[6],pn[6];
    float dof[10],tor[3],dih[3],len[3],ang[3];//[iphi psii] [i-1psi iome iphi]
    float vpos,tpos,prob;//v means co-pair in the left; t means co-pair in the right
    float sspro[4];//c h e solve
    point3s ptv[15];
    point3s pth[16];
    point3s pbb[2],pvb[2],ptsg,ptg;//all; only ncacocb
    char aaa,resind;//acd 1-20
    char stype;//from reference
    char ss2;//psipred
    char ssm;//mycalculation
    //char ti;//aass
    //0 rama 1 rotout 1-5 2 bondlengangle 6-13 hd[3] clash 14-16
    bool cw[20],hd[20];//wrong or not,need to process if hd is true
}residueatoms;

typedef struct threadinfo
{
  char *seqdata;
  point3d *cadata;
  int *resno,*tmpno,*resind,*tmpind;
  int nalign;
  double zscore;
  char tmpname[50],tmethod[50];
}threadinfo;

typedef struct paratrans
{
    bool    isorigx,isscale,ismtrix;
    double  origxn[3][4];
    double  scalen[3][4];
    double  mtrixn[3][4];
}paratrans;

typedef struct helixlink
{
    char initid,endid;
    char initchainid,endchainid;
    int  initindex,endindex;
    char helixtype;
    int helixlength;
} helixlink;

typedef struct sheetlink
{
    char initid,endid,currid,previd;
    char initchainid,endchainid,currchainid,prevchainid;
    int  initindex,endindex,currindex,previndex;
    char curratom[4],prevatom[4];
    char sheettype;
} sheetlink;

typedef struct turnlink
{
    char initid,endid;
    char initchainid,endchainid;
    int  initindex,endindex;
} turnlink;

typedef struct linklink
{
    char initid[3],endid[3];
    char initchainid,endchainid;
    int  initindex,endindex;
    char initatom[4],endatom[4];
} linklink;

typedef struct ssbondlink
{
    char initchainid,endchainid;
    int  initindex,endindex;
} ssbondlink;

typedef struct hydbndlink
{
    char initid,endid;
    char initchainid,endchainid;
    int  initindex,endindex;
    char initatom[4],endatom[4];
} hydbndlink;

typedef struct sltbrglink
{
    char initid,endid;
    char initchainid,endchainid;
    int  initindex,endindex;
    char initatom[4],endatom[4];
}sltbrglink; 

typedef struct cispeplink
{
    char initid,endid;//amino2add3index
    char initchainid,endchainid;//chainid
    int  initindex,endindex;//seqnum
}cispeplink;

typedef struct sitelink
{
    char sitename[3];
    char sitenum;
    char aminoid[4];
    char chainid[4];
    int  amiindex[4];
}sitelink;

typedef struct segment
{
    int init;
    int term;
}segment;

typedef struct prochain
{
    segment chainseg;
    char chainid;
}prochain;

typedef struct promodel
{
    prochain procha[maxnumchains];
    int  nchain;
}promodel;

typedef struct atom // Structure For An Object
{
/*
ATOM   3066  CG  LEU   408     129.354   9.432   9.619  1.00 37.90      1AAW3194
ATOM   3529  HE2 HIS B 376       7.149  17.540  -2.317  1.00  0.00      1HLE3657
ATOM  39172  N1    G B1871    -818.809   4.829 847.046  1.00897.52           N  
*/
    char  simpletype;     // atom hetatm
    int   seqno;
    char  detailtype[6];  // cg
    char  detail;         // 1 to 12
    char  residue[3];     // leu
    char  residueid;      // 0-19 add1 index
    char  chainid;        // a b or null
    int   resno,atomtype,dftype,abtype; // 408 36 159
    float x,y,z;
    float occu,tempe;
    char  alt,ins;
    unsigned char cl[3];//color
    unsigned char inout;//1 out 2 middle 3 inner
} atom;

typedef struct boneinfo
{
    int indn,indca,indc,indo,indcb,indf,indh,indha;//pro no h gly has 1ha no cb
    int indall[84];
    int resind;
    char resid;//ACD
    int istart,iend;
    unsigned char sst;//0 coil 1 helix 2 sheet 3 turn
}boneinfo;

typedef struct hssp
{
    int nseq,nres;
    char cc;
    int pro[20];
    float entropy,weight;
    int nocc,ndel,nins,relent;
}hssp;

typedef struct sseinfo
{
    //dssp
    int realid;
    int nseq,nres;
    char cc,ca;//chain id amino id
    char cs[9];
    int bp1,bp2;
    char cacc; //A B for sheet
    int nacc;
    int  inho1,iohn1,inho2,iohn2;
    float fnho1,fohn1,fnho2,fohn2;
    float tco;
    float kappa,alpha;
    float phi,psi;
    float x,y,z;
}sseinfo;

typedef struct hybond
{
    int accid[7];//self o other n
    int donid[7];//self n other o
    double eneacc[7];//self o other n
    double enedon[7];//self n other o
    int nind[7];//self o
    int oind[7];//self n
    double ndist[7];// n in other
    double odist[7];// o in other
}hybond;

typedef struct caneigh
{
    int resid[7];
    double dist[7];
}caneigh;

typedef struct alphahelix
{
    segse seg;
    double dist1,dist2;
    point3d cen,dir;
}alphahelix;

typedef struct betastrand
{
    segse seg;
    double dist1,dist2;
    point3d cen,dir,pla;
}betastrand;

typedef struct betasheet
{
    char cid;
    int numstrands;
    int indpair[60][2];
    segment segpair[60][2];
    segment bsegpair[60][2];
    double mdist[60],ang[60];
    double pmdist[60],pang[60],sheang[60];
    point3d cen[60][2],dir[60][2],pla[60][2];
}betasheet;

typedef struct abssinfo
{
    char ss;
    segse seg,bseg;
    int inds;
}abssinfo;

typedef struct nearca
{
    double dist[4];
    int bbid[4];
}nearca;

typedef struct bspline
{
    point3d pts,pn,pd,pb;
}bspline;

typedef struct closeca{
    int ntot;
    int indx[40];
    int aatp[40];
    float dist[40];
}closeca;

typedef struct edgetable
{
    segment *edges;
    int nedges;
}edgetable;

typedef struct faceinfo
{
    int a,b,c;
    point3d pn;
    double area;
    bool inout;//interior true
}faceinfo;

typedef struct vertinfo
{
    double x,y,z;
    point3d pn;
    double area;
    int atomid;
    bool inout,iscont;//is concave surface
    float es;//electronstatics
}vertinfo;

typedef struct triplebab
{
    int a,b,c;
}triplebab;

typedef struct residuepair
{
    double pval[20];
    bool flag[20],pcw[20];
}residuepair;

/**** constants ***/
static const double PI= (4.0 * atan(1.0));
static const double raddeg= PI/180.0;
static const double degrad= 180.0/PI;

//phi C[-1]-N-CA-C  psi N-CA-C-N[+1] omega cai-c-n-ca
static const double  DELTA = 0.5; // delta distance Angstrom
static const double  RR = 1.9858775; // cal/mol
static const double  TT = 300.00;    // Kevin
static const double  ALPHA = 1.61;   // alpha value

static const char strmonth[][4]={"JAN","FEB","MAR","APR","MAY","JUN","JUL","AUG","SEP","OCT","NOV","DEC"};

static const double scaa[]={//ef.solvediff()
0.85,0.78,1.02,1.11,1.00,
0.79,1.09,0.99,1.19,1.02,
1.02,1.03,1.02,1.10,1.19,
0.90,1.00,1.00,1.02,1.11,
};

static const double cbsta[][3]={
1.52369,1.92448,122.35124, 1.52962,1.91875,122.28332, 1.53149,1.92096,122.53073, 1.53132,1.92149,122.55859,
1.53219,1.91936,122.36077, 1.51371,1.90607,121.58025, 1.53172,1.92135,122.58755, 1.54507,1.92240,122.99168,
1.53180,1.92265,122.48313, 1.53108,1.92040,122.28572, 1.53078,1.91922,122.34940, 1.53148,1.92241,122.84907,
1.52996,1.94084,115.54662, 1.53057,1.92128,122.53531, 1.53085,1.92046,122.42439, 1.52991,1.91734,122.39611,
1.54070,1.91400,122.79225, 1.54500,1.92132,123.02119, 1.53172,1.92002,122.56818, 1.53251,1.91842,122.36359
};//n c ca cb  len ang tor

static const double sglatavg[][3]={
1.5256,1.924,122.6346, 2.067316,2.04,127.254,  2.4798,2.0697,132.897,  3.129,2.087,136.15,    3.4099,2.104,137.9797,
0,1.2617,180.0,        3.1555,2.11659,135.919, 2.32,2.09,130.84,       3.569,2.0937,138.065,  2.6224,2.14,139.848,
2.9603,2.0976,140.648, 2.485,2.10996,133.8356, 1.87548,2.1875,73.1986, 3.107,2.1085,138.898,  4.16488,2.0575,136.45,
1.901,1.87785,119.78,  1.939,1.9906,123.672,   1.95866,1.99,131.016,   3.886,1.9977,143.1736, 3.781,2.0965,138.927 
};

static const int sgatomnum[]={
1,2,4,5,7,
0,6,4,5,4,
4,4,3,5,7,
2,3,3,10,8,
0,0,0,0,0,0
};

static const char aad1[]= {
'A','C','D','E','F',
'G','H','I','K','L',
'M','N','P','Q','R',
'S','T','V','W','Y',
'J','B','Z','X','O','U'};

static const char aad3[][4] = {
"ALA","CYS","ASP","GLU","PHE",
"GLY","HIS","ILE","LYS","LEU",
"MET","ASN","PRO","GLN","ARG",
"SER","THR","VAL","TRP","TYR",
"XLE","ASX","GLX","UNK","PYL","SEC"};

static const char sTab4[][8] = {
    "C",  "CA", "CB", "CD", "CD1",//5
    "CD2","CE", "CE1","CE2","CE3",//10
    "CG", "CG1","CG2","CH2","CZ",//15
    "CZ2","CZ3","N",  "ND1","ND2",//20
    "NE", "NE1","NE2","NH1","NH2",//25
    "NZ", "O",  "OD1","OD2","OE1",//30
    "OE2","OG", "OG1","OH", "SG",//35
    "SD", "H",  "HA", "HA2","HA3",//40
    "HB","HB1","HB2","HB3","HD1",//45
    "HD2","HD3","HD11","HD12","HD13",//50
    "HD21","HD22","HD23","HE","HE1",//55
    "HE2","HE3","HE21","HE22","HG",//60
    "HG1","HG2","HG3","HG11","HG12",//65
    "HG13","HG21","HG22","HG23","HH",//70
    "HH2","HH11","HH12","HH21","HH22",//75
    "HZ","HZ1","HZ2","HZ3","H1",//80
    "H2","H3","OXT"//
};

static const char ffff[][4] = {
"   ","SG ","OD2","OE2","CZ ",
"   ","NE2","CD1","NZ ","CD2",
"CE ","ND2","CD ","NE2","NH2",
"OG ","CG2","CG2","CH2","OH ",
"   ","   ","   ","   ","   ","   "};

static const char dnarnares[8][4] ={
" DA"," DG"," DC"," DT",
"  A","  G","  C","  U"};

static const int numdof[][2]={
{0,1},//0
{1,1},//1
{2,0},//2
{3,0},//3
{2,0},//4
{0,0},//5
{2,0},//6
{2,2},//7
{4,1},//8
{2,2},//9
{3,1},//10
{2,0},//11
{2,0},//12//hd1dof infact is zero use 2 10 3 17 get torsion then -+120
{3,0},//13
{5,0},//14 2near coplane for hyd
{1,1},//15
{1,2},//16
{1,2},//17
{2,0},//18
{2,1},//19
};

static const int numaatype[]={
6,12,19,27,36,
40,50,58,67,74,
82,90,97,106,116,
122,129,135,149,160};

static const double expval[]={
1.0000000,0.9900498,0.9801987,0.9704455,0.9607894,0.9512294,0.9417645,0.9323938,0.9231163,0.9139312,
0.9048374,0.8958341,0.8869204,0.8780954,0.8693582,0.8607080,0.8521438,0.8436648,0.8352702,0.8269591,
0.8187308,0.8105842,0.8025188,0.7945336,0.7866279,0.7788008,0.7710516,0.7633795,0.7557837,0.7482636,
0.7408182,0.7334470,0.7261490,0.7189237,0.7117703,0.7046881,0.6976763,0.6907343,0.6838614,0.6770569,
0.6703200,0.6636503,0.6570468,0.6505091,0.6440364,0.6376282,0.6312836,0.6250023,0.6187834,0.6126264,
0.6065307,0.6004956,0.5945205,0.5886050,0.5827483,0.5769498,0.5712091,0.5655254,0.5598984,0.5543273,
0.5488116,0.5433509,0.5379444,0.5325918,0.5272924,0.5220458,0.5168513,0.5117086,0.5066170,0.5015761,
0.4965853,0.4916442,0.4867523,0.4819090,0.4771139,0.4723666,0.4676664,0.4630131,0.4584060,0.4538448,
0.4493290,0.4448581,0.4404317,0.4360493,0.4317105,0.4274149,0.4231621,0.4189515,0.4147829,0.4106558,
0.4065697,0.4025242,0.3985190,0.3945537,0.3906278,0.3867410,0.3828929,0.3790830,0.3753111,0.3715767,
0.3678794,0.3642190,0.3605949,0.3570070,0.3534547,0.3499377,0.3464558,0.3430085,0.3395955,0.3362165,
0.3328711,0.3295590,0.3262798,0.3230333,0.3198190,0.3166368,0.3134862,0.3103669,0.3072787,0.3042213,
0.3011942,0.2981973,0.2952302,0.2922926,0.2893842,0.2865048,0.2836540,0.2808316,0.2780373,0.2752708,
0.2725318,0.2698201,0.2671353,0.2644773,0.2618457,0.2592403,0.2566608,0.2541070,0.2515786,0.2490753,
0.2465970,0.2441433,0.2417140,0.2393089,0.2369278,0.2345703,0.2322363,0.2299255,0.2276377,0.2253727,
0.2231302,0.2209100,0.2187119,0.2165357,0.2143811,0.2122480,0.2101361,0.2080452,0.2059751,0.2039256,
0.2018965,0.1998876,0.1978987,0.1959296,0.1939800,0.1920499,0.1901390,0.1882471,0.1863740,0.1845195,
0.1826835,0.1808658,0.1790661,0.1772844,0.1755204,0.1737739,0.1720449,0.1703330,0.1686381,0.1669602,
0.1652989,0.1636541,0.1620258,0.1604136,0.1588174,0.1572372,0.1556726,0.1541237,0.1525901,0.1510718,
0.1495686,0.1480804,0.1466070,0.1451482,0.1437039,0.1422741,0.1408584,0.1394569,0.1380692,0.1366954,
0.1353353,0.1339887,0.1326555,0.1313355,0.1300287,0.1287349,0.1274540,0.1261858,0.1249302,0.1236871,
0.1224564,0.1212380,0.1200316,0.1188373,0.1176548,0.1164842,0.1153251,0.1141776,0.1130415,0.1119167,
0.1108032,0.1097006,0.1086091,0.1075284,0.1064585,0.1053992,0.1043505,0.1033122,0.1022842,0.1012665,
0.1002588,0.0992613,0.0982736,0.0972957,0.0963276,0.0953692,0.0944202,0.0934807,0.0925506,0.0916297,
0.0907180,0.0898153,0.0889216,0.0880368,0.0871609,0.0862936,0.0854350,0.0845849,0.0837432,0.0829100,
0.0820850,0.0812682,0.0804596,0.0796590,0.0788664,0.0780817,0.0773047,0.0765355,0.0757740,0.0750200,
0.0742736,0.0735345,0.0728029,0.0720785,0.0713613,0.0706512,0.0699482,0.0692522,0.0685632,0.0678809,
0.0672055,0.0665368,0.0658748,0.0652193,0.0645703,0.0639279,0.0632918,0.0626620,0.0620385,0.0614212,
0.0608101,0.0602050,0.0596059,0.0590129,0.0584257,0.0578443,0.0572688,0.0566989,0.0561348,0.0555762,
0.0550232,0.0544757,0.0539337,0.0533970,0.0528657,0.0523397,0.0518189,0.0513033,0.0507928,0.0502874,
0.0497871,0.0492917,0.0488012,0.0483156,0.0478349,0.0473589,0.0468877,0.0464212,0.0459593,0.0455020,
0.0450492,0.0446010,0.0441572,0.0437178,0.0432828,0.0428521,0.0424257,0.0420036,0.0415857,0.0411719,
0.0407622,0.0403566,0.0399551,0.0395575,0.0391639,0.0387742,0.0383884,0.0380064,0.0376283,0.0372538,
0.0368832,0.0365162,0.0361528,0.0357931,0.0354370,0.0350844,0.0347353,0.0343896,0.0340475,0.0337087,
0.0333733,0.0330412,0.0327124,0.0323869,0.0320647,0.0317456,0.0314298,0.0311170,0.0308074,0.0305009,
0.0301974,0.0298969,0.0295994,0.0293049,0.0290133,0.0287246,0.0284388,0.0281559,0.0278757,0.0275983,
0.0273237,0.0270518,0.0267827,0.0265162,0.0262523,0.0259911,0.0257325,0.0254765,0.0252230,0.0249720,
0.0247235,0.0244775,0.0242340,0.0239928,0.0237541,0.0235177,0.0232837,0.0230521,0.0228227,0.0225956,
0.0223708,0.0221482,0.0219278,0.0217096,0.0214936,0.0212797,0.0210680,0.0208584,0.0206508,0.0204453,
0.0202419,0.0200405,0.0198411,0.0196437,0.0194482,0.0192547,0.0190631,0.0188734,0.0186856,0.0184997,
0.0183156,0.0181334,0.0179530,0.0177743,0.0175975,0.0174224,0.0172490,0.0170774,0.0169075,0.0167392,
0.0165727,0.0164078,0.0162445,0.0160829,0.0159229,0.0157644,0.0156076,0.0154523,0.0152985,0.0151463,
0.0149956,0.0148464,0.0146986,0.0145524,0.0144076,0.0142642,0.0141223,0.0139818,0.0138427,0.0137049,
0.0135686,0.0134335,0.0132999,0.0131675,0.0130365,0.0129068,0.0127784,0.0126512,0.0125254,0.0124007,
0.0122773,0.0121552,0.0120342,0.0119145,0.0117959,0.0116786,0.0115624,0.0114473,0.0113334,0.0112206,
0.0111090,0.0109985,0.0108890,0.0107807,0.0106734,0.0105672,0.0104621,0.0103580,0.0102549,0.0101529,
0.0100518,0.0099518,0.0098528,0.0097548,0.0096577,0.0095616,0.0094665,0.0093723,0.0092790,0.0091867,
0.0090953,0.0090048,0.0089152,0.0088265,0.0087386,0.0086517,0.0085656,0.0084804,0.0083960,0.0083125,
0.0082297,0.0081479,0.0080668,0.0079865,0.0079071,0.0078284,0.0077505,0.0076734,0.0075970,0.0075214,
0.0074466,0.0073725,0.0072991,0.0072265,0.0071546,0.0070834,0.0070129,0.0069431,0.0068741,0.0068057,
0.0067379,0.0066709,0.0066045,0.0065388,0.0064737,0.0064093,0.0063456,0.0062824,0.0062199,0.0061580,
0.0060967,0.0060361,0.0059760,0.0059166,0.0058577,0.0057994,0.0057417,0.0056846,0.0056280,0.0055720,
0.0055166,0.0054617,0.0054073,0.0053535,0.0053003,0.0052475,0.0051953,0.0051436,0.0050924,0.0050418,
0.0049916,0.0049419,0.0048928,0.0048441,0.0047959,0.0047482,0.0047009,0.0046541,0.0046078,0.0045620,
0.0045166,0.0044716,0.0044271,0.0043831,0.0043395,0.0042963,0.0042536,0.0042112,0.0041693,0.0041278,
0.0040868,0.0040461,0.0040058,0.0039660,0.0039265,0.0038875,0.0038488,0.0038105,0.0037726,0.0037350,
0.0036979,0.0036611,0.0036246,0.0035886,0.0035529,0.0035175,0.0034825,0.0034479,0.0034136,0.0033796,
0.0033460,0.0033127,0.0032797,0.0032471,0.0032148,0.0031828,0.0031511,0.0031198,0.0030887,0.0030580,
0.0030276,0.0029974,0.0029676,0.0029381,0.0029088,0.0028799,0.0028512,0.0028229,0.0027948,0.0027670,
0.0027394,0.0027122,0.0026852,0.0026585,0.0026320,0.0026058,0.0025799,0.0025542,0.0025288,0.0025037,
0.0024788,0.0024541,0.0024297,0.0024055,0.0023816,0.0023579,0.0023344,0.0023112,0.0022882,0.0022654,
0.0022429,0.0022206,0.0021985,0.0021766,0.0021549,0.0021335,0.0021123,0.0020912,0.0020704,0.0020498,
0.0020294,0.0020092,0.0019892,0.0019695,0.0019499,0.0019305,0.0019112,0.0018922,0.0018734,0.0018548,
0.0018363,0.0018180,0.0017999,0.0017820,0.0017643,0.0017467,0.0017294,0.0017122,0.0016951,0.0016783,
0.0016616,0.0016450,0.0016287,0.0016125,0.0015964,0.0015805,0.0015648,0.0015492,0.0015338,0.0015185,
0.0015034,0.0014885,0.0014737,0.0014590,0.0014445,0.0014301,0.0014159,0.0014018,0.0013878,0.0013740,
0.0013604,0.0013468,0.0013334,0.0013202,0.0013070,0.0012940,0.0012811,0.0012684,0.0012558,0.0012433,
0.0012309,0.0012187,0.0012065,0.0011945,0.0011826,0.0011709,0.0011592,0.0011477,0.0011363,0.0011250,
0.0011138,0.0011027,0.0010917,0.0010809,0.0010701,0.0010595,0.0010489,0.0010385,0.0010281,0.0010179,
0.0010078,0.0009978,0.0009878,0.0009780,0.0009683,0.0009586,0.0009491,0.0009397,0.0009303,0.0009210,
0.0009119,0.0009028,0.0008938,0.0008849,0.0008761,0.0008674,0.0008588,0.0008502,0.0008418,0.0008334,
0.0008251,0.0008169,0.0008088,0.0008007,0.0007928,0.0007849,0.0007771,0.0007693,0.0007617,0.0007541,
0.0007466,0.0007392,0.0007318,0.0007245,0.0007173,0.0007102,0.0007031,0.0006961,0.0006892,0.0006823,
0.0006755,0.0006688,0.0006622,0.0006556,0.0006491,0.0006426,0.0006362,0.0006299,0.0006236,0.0006174,
0.0006113,0.0006052,0.0005991,0.0005932,0.0005873,0.0005814,0.0005757,0.0005699,0.0005643,0.0005586,
0.0005531,0.0005476,0.0005421,0.0005367,0.0005314,0.0005261,0.0005209,0.0005157,0.0005106,0.0005055,
0.0005005,0.0004955,0.0004905,0.0004857,0.0004808,0.0004760,0.0004713,0.0004666,0.0004620,0.0004574,
0.0004528,0.0004483,0.0004439,0.0004394,0.0004351,0.0004307,0.0004265,0.0004222,0.0004180,0.0004139,
0.0004097,0.0004057,0.0004016,0.0003976,0.0003937,0.0003898,0.0003859,0.0003820,0.0003782,0.0003745,
0.0003707,0.0003671,0.0003634,0.0003598,0.0003562,0.0003527,0.0003492,0.0003457,0.0003422,0.0003388,
0.0003355,0.0003321,0.0003288,0.0003255,0.0003223,0.0003191,0.0003159,0.0003128,0.0003097,0.0003066,
0.0003035,0.0003005,0.0002975,0.0002946,0.0002916,0.0002887,0.0002859,0.0002830,0.0002802,0.0002774,
0.0002747,0.0002719,0.0002692,0.0002665,0.0002639,0.0002613,0.0002587,0.0002561,0.0002535,0.0002510,
0.0002485,0.0002460,0.0002436,0.0002412,0.0002388,0.0002364,0.0002340,0.0002317,0.0002294,0.0002271,
0.0002249,0.0002226,0.0002204,0.0002182,0.0002161,0.0002139,0.0002118,0.0002097,0.0002076,0.0002055,
0.0002035,0.0002014,0.0001994,0.0001975,0.0001955,0.0001935,0.0001916,0.0001897,0.0001878,0.0001860,
0.0001841,0.0001823,0.0001805,0.0001787,0.0001769,0.0001751,0.0001734,0.0001717,0.0001700,0.0001683,
0.0001666,0.0001649,0.0001633,0.0001617,0.0001601,0.0001585,0.0001569,0.0001553,0.0001538,0.0001522,
0.0001507,0.0001492,0.0001477,0.0001463,0.0001448,0.0001434,0.0001420,0.0001405,0.0001391,0.0001378,
0.0001364,0.0001350,0.0001337,0.0001324,0.0001310,0.0001297,0.0001284,0.0001272,0.0001259,0.0001247,
0.0001234,0.0001222,0.0001210,0.0001198,0.0001186,0.0001174,0.0001162,0.0001151,0.0001139,0.0001128,
0.0001117,0.0001106,0.0001095,0.0001084,0.0001073,0.0001062,0.0001052,0.0001041,0.0001031,0.0001021,
0.0001010,0.0001000,0.0000990,0.0000981,0.0000971,0.0000961,0.0000952,0.0000942,0.0000933,0.0000923,
0.0000914,0.0000905,0.0000896,0.0000887,0.0000878,0.0000870,0.0000861,0.0000852,0.0000844,0.0000836,
0.0000827,0.0000819,0.0000811,0.0000803,0.0000795,0.0000787,0.0000779,0.0000771,0.0000764,0.0000756,
0.0000749,0.0000741,0.0000734,0.0000726,0.0000719,0.0000712,0.0000705,0.0000698,0.0000691,0.0000684,
0.0000677,0.0000671,0.0000664,0.0000657,0.0000651,0.0000644,0.0000638,0.0000631,0.0000625,0.0000619,
0.0000613,0.0000607,0.0000601,0.0000595,0.0000589,0.0000583,0.0000577,0.0000571,0.0000566,0.0000560,
0.0000555,0.0000549,0.0000544,0.0000538,0.0000533,0.0000527,0.0000522,0.0000517,0.0000512,0.0000507,
0.0000502,0.0000497,0.0000492,0.0000487,0.0000482,0.0000477,0.0000473,0.0000468,0.0000463,0.0000459
};

static const double ambereps[][10]={
0.17000000,0.13637448,0.12091319,0.18894444,0.20615528,0.18894444,0.12091319,0.17000000,0.20615528,0.18912430,//0
0.13637448,0.10940000,0.09699691,0.15157177,0.16537835,0.15157177,0.09699691,0.13637448,0.16537835,0.15171605,//1
0.12091319,0.09699691,0.08600000,0.13438750,0.14662878,0.13438750,0.08600000,0.12091319,0.14662878,0.13451543,//2
0.18894444,0.15157177,0.13438750,0.21000000,0.22912878,0.21000000,0.13438750,0.18894444,0.22912878,0.21019990,//3
0.20615528,0.16537835,0.14662878,0.22912878,0.25000000,0.22912878,0.14662878,0.20615528,0.25000000,0.22934690,//4
0.18894444,0.15157177,0.13438750,0.21000000,0.22912878,0.21000000,0.13438750,0.18894444,0.22912878,0.21019990,//5
0.12091319,0.09699691,0.08600000,0.13438750,0.14662878,0.13438750,0.08600000,0.12091319,0.14662878,0.13451543,//6
0.17000000,0.13637448,0.12091319,0.18894444,0.20615528,0.18894444,0.12091319,0.17000000,0.20615528,0.18912430,//7
0.20615528,0.16537835,0.14662878,0.22912878,0.25000000,0.22912878,0.14662878,0.20615528,0.25000000,0.22934690,//8
0.18912430,0.15171605,0.13451543,0.21019990,0.22934690,0.21019990,0.13451543,0.18912430,0.22934690,0.21040000,//9
};

static const double scwrldis[][10]={
2.5600,2.9600,2.9600,2.5700,2.9900,2.5700,2.9600,2.5600,2.9900,2.5700,
2.9600,3.3600,3.3600,2.9700,3.3900,2.9700,3.3600,2.9600,3.3900,2.9700,
2.9600,3.3600,3.3600,2.9700,3.3900,2.9700,3.3600,2.9600,3.3900,2.9700,
2.5700,2.9700,2.9700,2.5800,3.0000,2.5800,2.9700,2.5700,3.0000,2.5800,
2.9900,3.3900,3.3900,3.0000,3.4200,3.0000,3.3900,2.9900,3.4200,3.0000,
2.5700,2.9700,2.9700,2.5800,3.0000,2.5800,2.9700,2.5700,3.0000,2.5800,
2.9600,3.3600,3.3600,2.9700,3.3900,2.9700,3.3600,2.9600,3.3900,2.9700,
2.5600,2.9600,2.9600,2.5700,2.9900,2.5700,2.9600,2.5600,2.9900,2.5700,
2.9900,3.3900,3.3900,3.0000,3.4200,3.0000,3.3900,2.9900,3.4200,3.0000,
2.5700,2.9700,2.9700,2.5800,3.0000,2.5800,2.9700,2.5700,3.0000,2.5800,};

static const double sgdavg[][20]=
{
{4.023,4.388,4.570,4.676,5.007,4.046,4.796,4.855,4.892,4.835,4.821,4.602,4.572,4.729,5.092,4.233,4.596,4.663,5.327,5.075,},
{4.388,3.542,4.931,5.004,5.416,4.405,5.129,5.188,5.178,5.164,5.088,4.971,4.969,5.021,5.429,4.608,4.924,5.028,5.570,5.486,},
{4.570,4.931,5.270,5.450,5.674,4.496,5.219,5.442,5.205,5.381,5.390,5.092,5.143,5.319,5.345,4.508,4.911,5.220,6.004,5.749,},
{4.676,5.004,5.450,5.652,5.702,4.666,5.398,5.452,5.304,5.446,5.508,5.254,5.181,5.467,5.495,4.705,5.073,5.228,6.021,5.814,},
{5.007,5.416,5.674,5.702,5.937,4.958,5.639,5.807,5.621,5.797,5.739,5.545,5.363,5.607,5.788,5.306,5.666,5.614,6.285,6.053,},
{4.046,4.405,4.496,4.666,4.958,4.082,4.803,4.932,4.993,4.890,4.831,4.624,4.627,4.791,5.186,4.205,4.567,4.748,5.219,5.075,},
{4.796,5.129,5.219,5.398,5.639,4.803,5.494,5.541,5.493,5.508,5.525,5.342,5.160,5.427,5.722,4.890,5.257,5.384,5.858,5.797,},
{4.855,5.188,5.442,5.452,5.807,4.932,5.541,5.635,5.670,5.657,5.607,5.374,5.465,5.485,5.815,5.089,5.440,5.453,6.097,5.835,},
{4.892,5.178,5.205,5.304,5.621,4.993,5.493,5.670,5.978,5.641,5.576,5.400,5.436,5.455,6.087,5.019,5.350,5.476,5.582,5.597,},
{4.835,5.164,5.381,5.446,5.797,4.890,5.508,5.657,5.641,5.679,5.611,5.333,5.420,5.442,5.769,5.054,5.409,5.450,6.053,5.775,},
{4.821,5.088,5.390,5.508,5.739,4.831,5.525,5.607,5.576,5.611,5.547,5.335,5.310,5.413,5.735,5.035,5.404,5.414,6.056,5.790,},
{4.602,4.971,5.092,5.254,5.545,4.624,5.342,5.374,5.400,5.333,5.335,5.072,5.144,5.259,5.664,4.727,5.042,5.230,5.830,5.680,},
{4.572,4.969,5.143,5.181,5.363,4.627,5.160,5.465,5.436,5.420,5.310,5.144,5.137,5.224,5.582,4.768,5.146,5.266,5.464,5.442,},
{4.729,5.021,5.319,5.467,5.607,4.791,5.427,5.485,5.455,5.442,5.413,5.259,5.224,5.442,5.696,4.891,5.169,5.295,5.820,5.779,},
{5.092,5.429,5.345,5.495,5.788,5.186,5.722,5.815,6.087,5.769,5.735,5.664,5.582,5.696,6.186,5.303,5.594,5.636,5.827,5.922,},
{4.233,4.608,4.508,4.705,5.306,4.205,4.890,5.089,5.019,5.054,5.035,4.727,4.768,4.891,5.303,4.324,4.678,4.869,5.516,5.428,},
{4.596,4.924,4.911,5.073,5.666,4.567,5.257,5.440,5.350,5.409,5.404,5.042,5.146,5.169,5.594,4.678,4.986,5.227,5.949,5.716,},
{4.663,5.028,5.220,5.228,5.614,4.748,5.384,5.453,5.476,5.450,5.414,5.230,5.266,5.295,5.636,4.869,5.227,5.265,5.940,5.665,},
{5.327,5.570,6.004,6.021,6.285,5.219,5.858,6.097,5.582,6.053,6.056,5.830,5.464,5.820,5.827,5.516,5.949,5.940,6.704,6.411,},
{5.075,5.486,5.749,5.814,6.053,5.075,5.797,5.835,5.597,5.775,5.790,5.680,5.442,5.779,5.922,5.428,5.716,5.665,6.411,6.192,},
};

static const double sgdstd[][20]=
{
{0.281,0.410,0.554,0.622,0.656,0.289,0.670,0.534,0.660,0.439,0.568,0.537,0.433,0.587,0.841,0.417,0.484,0.456,0.852,0.801,},
{0.410,0.951,0.639,0.696,0.721,0.414,0.655,0.603,0.725,0.520,0.667,0.613,0.532,0.679,0.897,0.532,0.594,0.556,0.945,0.861,},
{0.554,0.639,0.739,0.801,0.780,0.526,0.690,0.710,0.836,0.668,0.812,0.706,0.656,0.754,0.956,0.709,0.726,0.663,0.839,0.794,},
{0.622,0.696,0.801,0.863,0.829,0.569,0.704,0.743,0.847,0.677,0.803,0.742,0.677,0.798,0.928,0.708,0.735,0.701,0.898,0.867,},
{0.656,0.721,0.780,0.829,0.799,0.721,0.888,0.808,0.967,0.754,0.804,0.829,0.801,0.858,1.118,0.659,0.717,0.762,0.963,0.901,},
{0.289,0.414,0.526,0.569,0.721,0.275,0.674,0.507,0.672,0.428,0.575,0.538,0.425,0.582,0.789,0.431,0.502,0.439,0.909,0.868,},
{0.670,0.655,0.690,0.704,0.888,0.674,0.862,0.837,0.958,0.782,0.790,0.776,0.758,0.865,1.105,0.696,0.740,0.792,1.100,0.989,},
{0.534,0.603,0.710,0.743,0.808,0.507,0.837,0.712,0.751,0.617,0.716,0.726,0.599,0.750,0.964,0.619,0.653,0.643,1.004,0.926,},
{0.660,0.725,0.836,0.847,0.967,0.672,0.958,0.751,1.011,0.677,0.801,0.871,0.728,0.903,1.103,0.771,0.779,0.718,1.199,1.072,},
{0.439,0.520,0.668,0.677,0.754,0.428,0.782,0.617,0.677,0.545,0.650,0.655,0.540,0.665,0.912,0.554,0.590,0.547,0.995,0.871,},
{0.568,0.667,0.812,0.803,0.804,0.575,0.790,0.716,0.801,0.650,0.733,0.774,0.654,0.799,0.953,0.651,0.701,0.660,0.993,0.936,},
{0.537,0.613,0.706,0.742,0.829,0.538,0.776,0.726,0.871,0.655,0.774,0.681,0.639,0.746,0.995,0.635,0.678,0.643,0.995,0.941,},
{0.433,0.532,0.656,0.677,0.801,0.425,0.758,0.599,0.728,0.540,0.654,0.639,0.513,0.665,0.912,0.545,0.595,0.562,1.009,0.935,},
{0.587,0.679,0.754,0.798,0.858,0.582,0.865,0.750,0.903,0.665,0.799,0.746,0.665,0.810,1.038,0.683,0.715,0.684,1.049,0.982,},
{0.841,0.897,0.956,0.928,1.118,0.789,1.105,0.964,1.103,0.912,0.953,0.995,0.912,1.038,1.229,0.923,0.928,0.922,1.354,1.237,},
{0.417,0.532,0.709,0.708,0.659,0.431,0.696,0.619,0.771,0.554,0.651,0.635,0.545,0.683,0.923,0.597,0.642,0.553,0.862,0.805,},
{0.484,0.594,0.726,0.735,0.717,0.502,0.740,0.653,0.779,0.590,0.701,0.678,0.595,0.715,0.928,0.642,0.694,0.606,0.866,0.835,},
{0.456,0.556,0.663,0.701,0.762,0.439,0.792,0.643,0.718,0.547,0.660,0.643,0.562,0.684,0.922,0.553,0.606,0.591,0.961,0.887,},
{0.852,0.945,0.839,0.898,0.963,0.909,1.100,1.004,1.199,0.995,0.993,0.995,1.009,1.049,1.354,0.862,0.866,0.961,1.047,1.053,},
{0.801,0.861,0.794,0.867,0.901,0.868,0.989,0.926,1.072,0.871,0.936,0.941,0.935,0.982,1.237,0.805,0.835,0.887,1.053,1.060,},
};

//             0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
static const int Tab5[20][36] ={
{  3,  2,  5,999,999,999,999,999,999,999,999,999,999,999,999,999,999,  1,999,999,999,999,999,999,999,999,  4,999,999,999,999,999,999,999,999,999},//0
{  8,  7, 10,999,999,999,999,999,999,999,999,999,999,999,999,999,999,  6,999,999,999,999,999,999,999,999,  9,999,999,999,999,999,999,999, 11,999},//1
{ 14, 13, 16,999,999,999,999,999,999,999, 17,999,999,999,999,999,999, 12,999,999,999,999,999,999,999,999, 15, 18, 18,999,999,999,999,999,999,999},//2
{ 21, 20, 23, 25,999,999,999,999,999,999, 24,999,999,999,999,999,999, 19,999,999,999,999,999,999,999,999, 22,999,999, 26, 26,999,999,999,999,999},//3
{ 29, 28, 31,999, 33, 33,999, 34, 34,999, 32,999,999,999, 35,999,999, 27,999,999,999,999,999,999,999,999, 30,999,999,999,999,999,999,999,999,999},//4
{ 38, 37,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999, 36,999,999,999,999,999,999,999,999, 39,999,999,999,999,999,999,999,999,999},//5
{ 42, 41, 44,999,999, 47,999, 48,999,999, 45,999,999,999,999,999,999, 40, 46,999,999,999, 49,999,999,999, 43,999,999,999,999,999,999,999,999,999},//6
{ 52, 51, 54,999, 57,999,999,999,999,999,999, 55, 56,999,999,999,999, 50,999,999,999,999,999,999,999,999, 53,999,999,999,999,999,999,999,999,999},//7
{ 60, 59, 62, 64,999,999, 65,999,999,999, 63,999,999,999,999,999,999, 58,999,999,999,999,999,999,999, 66, 61,999,999,999,999,999,999,999,999,999},//8
{ 69, 68, 71,999, 73, 73,999,999,999,999, 72,999,999,999,999,999,999, 67,999,999,999,999,999,999,999,999, 70,999,999,999,999,999,999,999,999,999},//9
{ 76, 75, 78,999,999,999, 81,999,999,999, 79,999,999,999,999,999,999, 74,999,999,999,999,999,999,999,999, 77,999,999,999,999,999,999,999,999, 80},//10
{ 84, 83, 86,999,999,999,999,999,999,999, 87,999,999,999,999,999,999, 82,999, 89,999,999,999,999,999,999, 85, 88,999,999,999,999,999,999,999,999},//11
{ 92, 91, 94, 96,999,999,999,999,999,999, 95,999,999,999,999,999,999, 90,999,999,999,999,999,999,999,999, 93,999,999,999,999,999,999,999,999,999},//12
{ 99, 98,101,103,999,999,999,999,999,999,102,999,999,999,999,999,999, 97,999,999,999,999,105,999,999,999,100,999,999,104,999,999,999,999,999,999},//13
{108,107,110,112,999,999,999,999,999,999,111,999,999,999,114,999,999,106,999,999,113,999,999,115,115,999,109,999,999,999,999,999,999,999,999,999},//14
{118,117,120,999,999,999,999,999,999,999,999,999,999,999,999,999,999,116,999,999,999,999,999,999,999,999,119,999,999,999,999,121,999,999,999,999},//15
{124,123,126,999,999,999,999,999,999,999,999,999,128,999,999,999,999,122,999,999,999,999,999,999,999,999,125,999,999,999,999,999,127,999,999,999},//16
{131,130,133,999,999,999,999,999,999,999,999,134,134,999,999,999,999,129,999,999,999,999,999,999,999,999,132,999,999,999,999,999,999,999,999,999},//17
{137,136,139,999,141,142,999,999,144,145,140,999,999,148,999,146,147,135,999,999,999,143,999,999,999,999,138,999,999,999,999,999,999,999,999,999},//18
{151,150,153,999,155,155,999,156,156,999,154,999,999,999,157,999,999,149,999,999,999,999,999,999,999,999,152,999,999,999,999,999,999,158,999,999}};//19

static const double vdwds[8][8]={
12.96000, 5.29000,13.69000, 8.41000,12.25000,10.24000,12.25000, 1.00000,
13.69000, 6.25000,12.25000, 6.25000,12.25000, 4.41000,12.96000, 1.00000,
 5.29000, 1.44000, 7.29000, 7.29000, 5.29000, 3.24000, 4.84000, 1.00000,
 6.25000, 4.41000, 5.76000, 5.29000, 6.76000, 2.89000, 4.84000, 1.00000,
12.25000, 5.29000,12.25000, 7.84000,10.89000, 5.29000,11.56000, 1.00000,
12.25000, 4.84000, 9.00000, 3.24000,12.25000, 4.84000,12.25000, 1.00000,
12.25000, 4.84000,10.89000, 7.84000,10.89000, 4.41000,12.25000, 1.00000,
 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000, 1.00000};

static const double asarea2[]= {
240.270, 267.707, 283.510, 315.039, 363.235, 
215.365, 333.600, 312.879, 347.779, 320.895, 
323.209, 288.210, 269.461, 317.071, 379.887,
249.458, 275.129, 286.960, 404.584, 376.261, 
300,300,300,300,300,300};

static const double scalaa[]={
0.99,1.01,1.01,1.00,1.01,
1.02,0.99,1.02,0.95,1.02,
0.99,1.00,0.98,0.99,0.96,
1.00,0.99,1.01,0.98,0.99,
};//peraa with 4.0

static const double nhochhmean[22]={
5.2172,8.7074,230.1397,4.2198,6.5391
};

static const double nhochhsigma[22]={
0.3676,0.4375,10.2234,0.4080,0.3763
};

static const double bend[]={
-2.5797,-2.5078,-2.3663,-2.1713,
-2.0138,-1.6565,-1.3714,-1.2133,
-1.1630,-0.7407,-0.5557,-0.2561
};

static const double nhocmeanval[][4]={//h-o h-o=c n-h-o n-h-o=c  
2.85,89.0,110.5,199.5,//i+3
2.00,147.0,159.0,160.0, //i+4  oldoh 
//2.83,89.0,110.0,201.5,//i+3 newoh
//2.00,148.0,159.0,155.0, //i+4
2.00,155.0,164.0,180.0,//0
2.00,155.0,164.0,180.0,//1
2.00,151.0,163.0,192.0,//2
2.00,151.0,163.0,192.0,//3
3.05,60.55,90.13,215.30,//310 i+2
2.18,115.02,156.41,188.93,//310 i+3
2.99,99.78,116.94,175.64,//PI helix i+4
};

static const double nhocstdval[][4]={//h-o h-o=c n-h-o n-h-o=c 
0.315504,7.697185,8.980366,7.932107,
0.530859,10.582243,11.249764,25.360054,

0.299730,11.770196,11.292558,68.955920,
0.299730,11.770196,11.292558,68.955920,
0.255088,12.376087,11.020081,69.165282,
0.255088,12.376087,11.020081,69.165282,
0.40,9.85,10.57,41.35,//310 helix i+2
1.27,13.68,22.56,54.54,//310 helix i+3
1.18,20.31,15.77,26.92,//PI helix i+4
};

static double stddelta=3.9;
static double stdangle[][4]={
{111.0,2.7*stddelta,111.0-2.7*stddelta,111.0+2.7*stddelta},//ncac
{117.2,2.2*stddelta,117.2-2.2*stddelta,117.2+2.2*stddelta},//cacn
{121.7,2.5*stddelta,121.7-2.5*stddelta,121.7+2.5*stddelta},//cnca

{113.1,2.5*stddelta,113.1-2.5*stddelta,113.1+2.5*stddelta},//ncac gly
{116.2,2.0*stddelta,116.2-2.0*stddelta,116.2+2.0*stddelta},//cacn gly 
{122.3,2.1*stddelta,122.3-2.1*stddelta,122.3+2.1*stddelta},//cnca gly  

{112.1,2.6*stddelta,112.1-2.6*stddelta,112.1+2.6*stddelta},//ncac pro  
{117.1,2.8*stddelta,117.1-2.8*stddelta,117.1+2.8*stddelta},//cacn pro 
{119.3,1.5*stddelta,119.3-1.5*stddelta,119.3+1.5*stddelta},//cnca pro

{120.1,2.1*stddelta,120.1-2.1*stddelta,120.1+2.1*stddelta},//caco  
{120.6,1.8*stddelta,120.6-1.8*stddelta,120.6+1.8*stddelta},//caco gly  
{120.2,2.4*stddelta,120.2-2.4*stddelta,120.2+2.4*stddelta},//caco pro  

{122.7,1.6*stddelta,122.7-1.6*stddelta,122.7+1.6*stddelta},//ocn  
{123.2,1.7*stddelta,123.2-1.7*stddelta,123.2+1.7*stddelta},//ocn gly  
{121.1,1.9*stddelta,121.1-1.9*stddelta,121.1+1.9*stddelta},//ocn pro  
};

static double stdlength[][4]={
  {1.459,0.020*stddelta,1.459-0.020*stddelta,1.459+0.020*stddelta},//nca  
  {1.525,0.026*stddelta,1.525-0.026*stddelta,1.525+0.026*stddelta},//cac  
  {1.336,0.023*stddelta,1.336-0.023*stddelta,1.336+0.023*stddelta},//cn  
  {3.813,0.080*stddelta,3.813-0.080*stddelta,3.813+0.080*stddelta},//caca

  {1.456,0.015*stddelta,1.456-0.015*stddelta,1.456+0.015*stddelta},//nca gly  
  {1.514,0.016*stddelta,1.514-0.016*stddelta,1.514+0.016*stddelta},//cac gly  
  {1.326,0.018*stddelta,1.326-0.018*stddelta,1.326+0.018*stddelta},//cn gly  

  {1.468,0.017*stddelta,1.468-0.017*stddelta,1.468+0.017*stddelta},//nca pro  
  {1.524,0.020*stddelta,1.524-0.020*stddelta,1.524+0.020*stddelta},//cac pro  
  {1.338,0.019*stddelta,1.338-0.019*stddelta,1.338+0.019*stddelta},//cn pro  

  {1.229,0.019*stddelta,1.229-0.019*stddelta,1.229+0.019*stddelta},//co 
  {1.232,0.016*stddelta,1.232-0.016*stddelta,1.232+0.016*stddelta},//co gly  
  {1.228,0.020*stddelta,1.228-0.020*stddelta,1.228+0.020*stddelta},//co pro  
};

static int torideal[][2]={
148,159, 148,158, 148,159, 148,159, 149,156,
148,159, 148,158, 148,157, 149,158, 148,158,
148,158, 148,159, 150,161, 148,159, 148,159,
148,158, 148,157, 148,157, 149,157, 149,156,

104, 75, 119, 65, 135, 53, 113, 71, 117, 71,
 90, 90, 121, 66, 119, 64, 113, 71, 126, 62,
115, 70, 125, 64, 149, 70, 116, 69, 118, 67,
110, 76, 119, 64, 119, 64, 120, 68, 114, 76,

148, 72, 148, 67, 136,  0, 150,164, 148, 67,
 41,  0, 148, 68, 145, 64, 147,170, 143, 74,
148, 70,  25, 21, 149, 73, 135,  0, 149, 68,
144, 78, 142, 81, 146, 66, 144, 71, 148, 65
};//h20 e20 c20

static const double angleaa[30]={0.01371,0.05788,0.115,0.17441,0.25209,0.3115,0.38842,0.45163,0.52094,0.5773,
0.62909,0.68469,0.73343,0.77684,0.80807,0.8431,0.86443,0.89337,0.9086,0.92764,
0.93906,0.95582,0.9642,0.97258,0.97791,0.98857,0.99238,0.99466,0.99999,1.0};

// Cumulative Density Function for probability of fragment substitution
// used by MCSimulation::mcfragsweepsub
static const double subratio[][21]={//20-i,3.0
0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.002,0.011,0.040,0.118,0.288,0.585,1.000,
0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.002,0.007,0.027,0.081,0.197,0.400,0.683,1.000,
0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.001,0.006,0.021,0.063,0.154,0.312,0.533,0.779,1.000,
0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.001,0.005,0.018,0.054,0.133,0.269,0.460,0.673,0.863,1.000,
0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.001,0.005,0.017,0.050,0.123,0.250,0.426,0.624,0.801,0.927,1.000,
0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.001,0.005,0.016,0.049,0.119,0.242,0.413,0.604,0.775,0.897,0.968,1.000,
0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.001,0.004,0.016,0.048,0.118,0.239,0.408,0.597,0.766,0.887,0.956,0.988,1.000,
0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.001,0.004,0.016,0.048,0.117,0.238,0.406,0.595,0.763,0.884,0.953,0.985,0.997,1.000,
0.000,0.000,0.000,0.000,0.000,0.000,0.001,0.004,0.016,0.048,0.117,0.238,0.406,0.594,0.762,0.883,0.952,0.984,0.996,0.999,1.000,
0.000,0.000,0.000,0.000,0.000,0.001,0.004,0.016,0.048,0.117,0.238,0.406,0.594,0.762,0.883,0.952,0.984,0.996,0.999,1.000,1.000,
0.000,0.000,0.000,0.000,0.001,0.004,0.016,0.048,0.117,0.238,0.406,0.594,0.762,0.883,0.952,0.984,0.996,0.999,1.000,1.000,1.000,
0.000,0.000,0.000,0.001,0.004,0.016,0.048,0.117,0.238,0.406,0.594,0.762,0.883,0.952,0.984,0.996,0.999,1.000,1.000,1.000,1.000,
0.000,0.000,0.001,0.004,0.016,0.048,0.117,0.238,0.406,0.594,0.762,0.883,0.952,0.984,0.996,0.999,1.000,1.000,1.000,1.000,1.000,
0.000,0.001,0.004,0.016,0.048,0.117,0.238,0.406,0.594,0.762,0.883,0.952,0.984,0.996,0.999,1.000,1.000,1.000,1.000,1.000,1.000,
0.000,0.003,0.015,0.047,0.116,0.237,0.405,0.594,0.762,0.883,0.952,0.984,0.996,0.999,1.000,1.000,1.000,1.000,1.000,1.000,1.000,
0.000,0.012,0.044,0.113,0.234,0.403,0.592,0.761,0.882,0.952,0.984,0.996,0.999,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,
0.000,0.032,0.103,0.225,0.396,0.587,0.758,0.881,0.951,0.984,0.995,0.999,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,
0.000,0.073,0.199,0.376,0.574,0.750,0.877,0.950,0.983,0.995,0.999,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,
0.000,0.137,0.327,0.540,0.731,0.867,0.946,0.982,0.995,0.999,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,
0.000,0.221,0.467,0.688,0.846,0.937,0.979,0.994,0.999,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,
0.000,0.317,0.600,0.803,0.919,0.973,0.993,0.998,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,
};

/* Period parameters */  
#define MATRIX_A 0x9908b0df   /* constant vector a */
#define UPPER_MASK 0x80000000 /* most significant w-r bits */
#define LOWER_MASK 0x7fffffff /* least significant r bits */

/* Tempering parameters */   
#define TEMPERING_MASK_B 0x9d2c5680
#define TEMPERING_MASK_C 0xefc60000
#define TEMPERING_SHIFT_U(y)  (y >> 11)
#define TEMPERING_SHIFT_S(y)  (y << 7)
#define TEMPERING_SHIFT_T(y)  (y << 15)
#define TEMPERING_SHIFT_L(y)  (y >> 18)
static const int N = 624;
static const int M = 397;
static unsigned long mt[N]; /* the array for the state vector  */
static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */

#define MODULUS    2147483647 /* DON'T CHANGE THIS VALUE                  */
#define MULTIPLIER 48271      /* DON'T CHANGE THIS VALUE                  */
#define CHECK      399268537  /* DON'T CHANGE THIS VALUE                  */
#define STREAMS    256        /* # of streams, DON'T CHANGE THIS VALUE    */
#define A256       22925      /* jump multiplier, DON'T CHANGE THIS VALUE */
#define DEFAULT    123456789  /* initial seed, use 0 < DEFAULT < MODULUS  */

static long seed[STREAMS] = {DEFAULT};  /* current state of each stream   */
static int  stream        = 0;          /* stream index, 0 is the default */
static int  initialized   = 0;          /* test for stream initialization */

static int yznozy,yzix1,yzix2,yzix3;
static double yzr[99];
#define yzia1 1279
#define yzic1 351762 
#define yzm1  1664557
#define yzia2 2011
#define yzic2 221592
#define yzm2  1048583
#define yzia3 15551
#define yzic3 6150
#define yzm3  29101
#define yzrm1 1.0/double(yzm1)
#define yzrm2 1.0/double(yzm2)

/**** declaring functions ****/
void sgenrand(unsigned long seed);
double Random(void);
void   PutSeed(long x);
void   SelectStream(int index);

#endif
